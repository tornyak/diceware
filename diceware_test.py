"""Unit tests for diceware module"""
import unittest
import statistics
import diceware as dw


class TestDiceware(unittest.TestCase):
    """Diceware tests"""
    diceDigits = [1, 2, 3, 4, 5, 6]

    def test_dice_is_fair(self):
        """
        Test that dice is fair by throwing it many times
        and verifying that it produces numbers between 1 and 6
        and that numbers are equaly distributed
        """

        throws = 240_000
        counts = [0 for _ in range(7)]

        for _ in range(throws):
            j = dw.roll_dice()
            self.assertIn(j, self.diceDigits)
            counts[j] = counts[j] + 1

        stdev = statistics.stdev(counts[1:])
        mean = statistics.mean(counts[1:])
        rsd = stdev * 100 / mean                # relative standard deviation
        # test for 1%, usually it is less than 0.3% for 1.2 milion rolls
        self.assertLess(rsd, 2)

    def test_generated_numbers_are_in_dice_range(self):
        """Test that all numbers are generated by the dice"""
        numbers = dw.generate_numbers(1000, 5)
        for number in numbers:
            for digit in list(str(number)):
                self.assertIn(int(digit), self.diceDigits)

    def test_empty_numbers_results_in_empty_words(self):
        """Test that empty list of numbers will result in empty list of words"""
        self.assertEqual(dw.numbers_to_words(wordlist=''), [])

    def test_different_numbers_map_to_words_en(self):
        """"Test that numbers are properly mapped into words. All input
            numbers are different and english dictionary is used"""
        with open('./wordlist/eff_large_wordlist.txt', encoding='utf-8') as wordlist:
            words = dw.numbers_to_words(
                wordlist, 22222, 11111, 33333, 66666, 44444, 55555)
            self.assertEqual(
                words, ['dating', 'abacus', 'handgrip',
                        'zoom', 'playlist', 'spotter'])

    def test_different_numbers_map_to_words_sv(self):
        """"Test that numbers are properly mapped into words. All input
            numbers are different and swedish dictionary is used"""
        with open('./wordlist/diceware-sv.txt', encoding='utf-8') as wordlist:
            words = dw.numbers_to_words(
                wordlist, 22222, 11111, 33333, 66666, 44444, 55555)
            self.assertEqual(
                words, ['ening', '=', 'kasus', 'zzzz', 'offra', 'snapp'])

    def test_same_numbers_map_to_words_en(self):
        """"Test that numbers are properly mapped into words. There are
            duplicated input numbers. English dictionary is used"""
        with open('./wordlist/eff_large_wordlist.txt', encoding='utf-8') as wordlist:
            words = dw.numbers_to_words(
                wordlist, 22222, 11111, 22222, 66666, 44444, 44444)
            self.assertEqual(
                words, ['dating', 'abacus', 'dating',
                        'zoom', 'playlist', 'playlist'])

    def test_same_numbers_map_to_words_sv(self):
        """"Test that numbers are properly mapped into words. There are
            duplicated input numbers. Swedish dictionary is used"""
        with open('./wordlist/diceware-sv.txt', encoding='utf-8') as wordlist:
            words = dw.numbers_to_words(
                wordlist, 22222, 11111, 22222, 66666, 44444, 44444)
            self.assertEqual(
                words, ['ening', '=', 'ening', 'zzzz', 'offra', 'offra'])

    def test_new_passphrase(self):
        """"Test that passphrases are generated with correct length"""
        self.assertEqual(len(dw.new_passphrase()), 6)
        self.assertEqual(len(dw.new_passphrase(5)), 5)
        self.assertEqual(len(dw.new_passphrase(4)), 4)


if __name__ == '__main__':
    unittest.main()
